true_worst_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
predicted = predict.stan.mc.choice(stan.mc, ffd_df, holdout_respondents[i])
predicted_best_choice = which(predicted$best_choice == 1)
predicted_worst_choice = which(predicted$worst_choice == 1)
holdout_true_predicted_stan_mc[(i-1)*holdout_respondents_q+j, ] =
c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
predicted = predict.stan.mc.choice(stan.mc.lca, ffd_df, holdout_respondents[i])
predicted_best_choice = which(predicted$best_choice == 1)
predicted_worst_choice = which(predicted$worst_choice == 1)
holdout_true_predicted_stan_mc_lca[(i-1)*holdout_respondents_q+j, ] =
c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
}
}
i=j=1
ffd_df = cbc.df[(cbc.df$resp.id == holdout_respondents[i]) & (cbc.df$ques == holdout_questions[j]), ]
true_best_choice = which(ffd_df$best_choice == 1)
true_worst_choice = which(ffd_df$worst_choice == 1)
ffd_df = ffd_df[, keep_cols, drop = FALSE]
predicted = predict.hier.mnl.choice(m2.hier, ffd_df, holdout_respondents[i])
max(cbc.df$resp.id)
max(cbc.df$ques)
holdout_respondents
holdout_questions
debugSource('C:/OnlineSync/Mega/R/work/maxdiff/test/temp.R', encoding = 'UTF-8')
data
r
debugSource('C:/OnlineSync/Mega/R/work/maxdiff/test/temp.R', encoding = 'UTF-8')
resp_cov
resp_cov
domodelmatrix_itemscovs(data[, 1], resp_cov)
str(domodelmatrix_itemscovs(data[, 1], resp_cov))
t(utilities)
str(t(utilities))
utilities
as.vector(utilities)
# model must contain cov.df (can be empty)
# data must be a data.frame with the items alternatives in the 1st column
# if resp_i is not NULL, calculate utilities for only 1 respondent
# if cov.df is not empty, take the covariates from it for the respondent with index resp_i
# if resp_i is NULL, calculate average for either nrow(cov.df) respondents if cov.df is not empty or for 1000 respondents (without any covariates)
# returns matrix of utilities, nresp x nrow(data)
calc.utilities.mnl = function(model, data, resp_i = NULL) {
# alt is the alternatives column, must be prepared to meet mlogit conditions
# resp_cov is a row of respondent's covariates (must be a data.frame, can be empty)
# returns matrix-row of utilities, 1 x nrow(data)
calc.utilities.mnl_resp = function(model, data, alt, resp_cov) {
coef.Sigma = cov.mlogit(model)
coef.mu = model$coef[1:dim(coef.Sigma)[1]]
draw_i = mvrnorm(1, coef.mu, coef.Sigma)
nalts = designctx$nalternatives
if (nrow(resp_cov) > 0) {
# add covariates to the data frame
# n_d = ncol(data)
# data = cbind(data, resp_cov[rep(1, nrow(data)), ])
# colnames(data)[(n_d+1):ncol(data)] = colnames(resp_cov)
resp_cov = resp_cov[rep(1, nrow(data)), , drop = FALSE]
ffd_mm = domodelmatrix_itemscovs(data[, 1], resp_cov) # data frame is automatically generated because of resp_cov
} else {
ffd_mm = data.frame(domodelmatrix_itemsonly(data[, 1])) # need explicit cast to data frame
}
if (designctx$anchors == 0) ffd_mm = ffd_mm[, -1] # without the Intercept
ffd_mm$alt = alt
ffd_mm$choice = rep(1, nrow(ffd_mm))
ffd.mlogit = mlogit.data(data = ffd_mm, choice = "choice", shape = "long", varying = 1:(ncol(ffd_mm)-2), alt.var = "alt", alt.levels = levels(ffd_mm$alt))
data.model = model.matrix(model$formula, data = ffd.mlogit)
utilities = data.model %*% draw_i
as.vector(utilities) # to get a row vector
}
# returns matrix of utilities, 1000 x nrow(data)
calc.utilities.mnl_resps_without_cov = function(model, data, alt) {
nresp = 1000
utilities = matrix(NA, nrow = nresp, ncol = nrow(data))
for (i in 1:nresp) {
utilities[i, ] = calc.utilities.mnl_resp(model, data, alt, data.frame())
}
utilities
}
# returns matrix of utilities, nrow(resp_cov) x nrow(data)
calc.utilities.mnl_resps_with_cov = function(model, data, alt, resp_cov) {
nresp = nrow(resp_cov)
utilities = matrix(NA, nrow = nresp, ncol = nrow(data))
for (i in 1:nresp) {
utilities[i, ] = calc.utilities.mnl_resp(model, data, alt, resp_cov[i, , drop = FALSE])
}
utilities
}
# ovo moramo napraviti zbog uvjeta u mlogit.data (broj redaka mora biti višekratnik od broja alternativa)
# ako broj redaka nije višekratnik, onda ćemo (bez utjecaja na izračun utilitya) iskopirati na kraj data
# još n_add redaka (1. redak), a kasnije ćemo to maknuti
n_add = 0
altlevels = as.numeric(levels(attributes(model$model$choice)$index$alt))
# ovo moramo napraviti iz istog razloga kao gore, s time da alt moramo izvući iz modela
# ne možemo staviti bezveze jer ako npr. koristimo covariates, onda su njihovi koeficijenti vezani
# za alternativu (alternative specific) pa ovise o alternativi i alternativa mora biti definirana
# kako je ovo samo za predikciju, postavljamo alt za sve podatke na istu vrijednost (nadamo se da će
# relativni omjeri i dalje ostati isti)
n_alts = length(altlevels)
n_df = nrow(data)
if ((n_df %% n_alts) > 0) {
n_add = ceiling(n_df/n_alts)*n_alts - n_df
data.add = data[rep(1, n_add), , drop = FALSE]
data = rbind(data, data.add)
}
alt = factor(rep(altlevels, nrow(data)/n_alts), levels = altlevels)
if (is.null(resp_i)) {
if (nrow(model$cov.df) > 0) {
utilities = calc.utilities.mnl_resps_with_cov(model, data, alt, model$cov.df)
} else {
utilities = calc.utilities.mnl_resps_without_cov(model, data, alt)
}
} else {
if (nrow(model$cov.df) > 0) {
utilities = calc.utilities.mnl_resp(model, data, alt, model$cov.df[resp_i, , drop = FALSE])
} else {
utilities = calc.utilities.mnl_resp(model, data, alt, data.frame())
}
}
if (n_add > 0) utilities = utilities[, -((ncol(utilities)-n_add+1):ncol(utilities))]
utilities
}
predicted = predict.hier.mnl.choice(m2.hier, ffd_df, holdout_respondents[i])
holdout_respondents_n = 10
holdout_respondents_q = 3
holdout_respondents = sample(1:max(cbc.df$resp.id), holdout_respondents_n, replace = FALSE)
holdout_questions = sample(1:max(cbc.df$ques), holdout_respondents_q, replace = FALSE)
keep_cols = c("alt")
rgrid = expand.grid(holdout_questions, holdout_respondents)
holdout_true_predicted = matrix(
NA,
nrow = holdout_respondents_n * holdout_respondents_q,
ncol = 6,
dimnames = list(
"respondent/question" = paste(rgrid$Var2, "/", rgrid$Var1, sep = ""),
"choice" = c("true best", "predicted best", "correct best", "true worst", "predicted worst", "correct worst")
)
)
holdout_true_predicted_mnl = holdout_true_predicted_hb = holdout_true_predicted_stan_mc = holdout_true_predicted_stan_mc_lca = holdout_true_predicted
for (i in 1:holdout_respondents_n) { # respondent
for (j in 1:holdout_respondents_q) { # question
ffd_df = cbc.df[(cbc.df$resp.id == holdout_respondents[i]) & (cbc.df$ques == holdout_questions[j]), ]
true_best_choice = which(ffd_df$best_choice == 1)
true_worst_choice = which(ffd_df$worst_choice == 1)
ffd_df = ffd_df[, keep_cols, drop = FALSE]
predicted = predict.hier.mnl.choice(m2.hier, ffd_df, holdout_respondents[i])
predicted_best_choice = which(predicted$best_choice == 1)
predicted_worst_choice = which(predicted$worst_choice == 1)
holdout_true_predicted_mnl[(i-1)*holdout_respondents_q+j, ] =
c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
true_worst_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
predicted = predict.hb.mnl.choice(hb.post, ffd_df, holdout_respondents[i])
predicted_best_choice = which(predicted$best_choice == 1)
predicted_worst_choice = which(predicted$worst_choice == 1)
holdout_true_predicted_hb[(i-1)*holdout_respondents_q+j, ] =
c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
true_worst_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
predicted = predict.stan.mc.choice(stan.mc, ffd_df, holdout_respondents[i])
predicted_best_choice = which(predicted$best_choice == 1)
predicted_worst_choice = which(predicted$worst_choice == 1)
holdout_true_predicted_stan_mc[(i-1)*holdout_respondents_q+j, ] =
c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
predicted = predict.stan.mc.choice(stan.mc.lca, ffd_df, holdout_respondents[i])
predicted_best_choice = which(predicted$best_choice == 1)
predicted_worst_choice = which(predicted$worst_choice == 1)
holdout_true_predicted_stan_mc_lca[(i-1)*holdout_respondents_q+j, ] =
c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
}
}
sum(holdout_true_predicted_mnl[, "correct best"])/nrow(holdout_true_predicted_mnl)
sum(holdout_true_predicted_mnl[, "correct worst"])/nrow(holdout_true_predicted_mnl)
sum(holdout_true_predicted_hb[, "correct best"])/nrow(holdout_true_predicted_hb)
sum(holdout_true_predicted_hb[, "correct worst"])/nrow(holdout_true_predicted_hb)
sum(holdout_true_predicted_stan_mc[, "correct best"])/nrow(holdout_true_predicted_stan_mc)
sum(holdout_true_predicted_stan_mc[, "correct worst"])/nrow(holdout_true_predicted_stan_mc)
sum(holdout_true_predicted_stan_mc_lca[, "correct best"])/nrow(holdout_true_predicted_stan_mc_lca)
sum(holdout_true_predicted_stan_mc_lca[, "correct worst"])/nrow(holdout_true_predicted_stan_mc_lca)
#holdout_true_predicted = holdout_true_predicted_mnl
holdout_true_predicted = holdout_true_predicted_hb
#holdout_true_predicted = holdout_true_predicted_stan_mc
#holdout_true_predicted = holdout_true_predicted_stan_mc_lca
holdout_true_predicted[sample(1:nrow(holdout_true_predicted), 20), !(colnames(holdout_true_predicted) %in% c("correct best", "correct worst"))]
#holdout_true_predicted[sample(1:nrow(holdout_true_predicted), 20), ]
total_correct = sum(holdout_true_predicted[, "correct best"]) + sum(holdout_true_predicted[, "correct worst"])
paste("Ukupno točno predviđanja:", round(100*total_correct/(2*nrow(holdout_true_predicted)), digits = 2), "%", sep = "")
#############################################################################################################
lca_segments = designctx$rsegments
# ### >>> GMNL LCA: https://rpubs.com/msarrias1986/335556
# if (length(designctx$covariates) == 0) {
#   # fmlstring = paste("choice ~ 0 + ", paste(colnames(mm), collapse = "+")) # all vars have generic coefs
#   fmlstring = paste("choice ~ ", paste(colnames(mm), collapse = "+")) # all vars have generic coefs
#   fmlstring = paste(fmlstring, "| 0 | 0 | 0 | 1")
#   fml2 = as.formula(fmlstring)
# } else {
#   ncov.columns = setdiff(colnames(mm), cov.columns)
#   # fmlstring1 = paste("0 +", paste(ncov.columns, collapse = "+")) # all but covariates have generic coefs
#   fmlstring1 = paste(ncov.columns, collapse = "+") # all but covariates have generic coefs
#   # fmlstring2 = paste("0 +", paste(cov.columns, collapse = "+"))
#   fmlstring2 = paste(cov.columns, collapse = "+")
#   fmlstring = paste("choice ~", fmlstring1, "| 0 | 0 | 0 |", fmlstring2)
#   fml2 = as.formula(fmlstring)
# }
#
# # koliko segmenata?? staviti u Q =
# lca_segments = designctx$rsegments
#
# ## BUILD AND SAVE MODEL
# library(gmnl)
# lcm = gmnl(fml2, data = cbc.mlogit, model = "lc", Q = lca_segments, panel = TRUE, method = 'bhhh') # cbc.mlogit je definiran kod mixed mnl gore
# saveRDS(lcm, lcmodelfile)
#
# ## LOAD MODEL
# lcm = readRDS(lcmodelfile)
# sm.lc = summary(lcm)$CoefTable
#
# ### GMNL LCA <<<
### >>> STAN MC LCA
estimated_coefs_avg = stan.mc.lca.est[, "Mean"] # average coefficients
estimated_coefs_by_seg = t(stan.mc.lca.betas.mean) # coefficients by segments
### STAN MC LCA <<<
### >>> NEOVISNA SEGMENTACIJA
estimated_resp_coefs = beta.post.mean # coefficients by respondent
estimated_coefs_avg = sm.hb[, "Mean"] # average coefficients
# estimated_resp_coefs = t(stan.mc.betas.mean) # coefficients by respondent
# estimated_coefs_avg = stan.mc.est[, "Mean"] # average coefficients
library(cluster)
km1 = kmeans(estimated_resp_coefs, centers = designctx$rsegments)
#km1
estimated_coefs_by_seg = km1$centers
colnames(estimated_coefs_by_seg) = names(estimated_coefs_avg)
rownames(estimated_coefs_by_seg) = paste("seg", rownames(estimated_coefs_by_seg))
### NEOVISNA SEGMENTACIJA <<<
estimated_coefs_by_seg
### NEOVISNA SEGMENTACIJA >>>
resp_segs = km1$cluster
### NEOVISNA SEGMENTACIJA <<<
for (s in 1:lca_segments) {
print(paste("Segment", s))
print(which(resp_segs == s))
}
### NEOVISNA SEGMENTACIJA >>>
clusplot(estimated_resp_coefs, km1$cluster, color = TRUE, shade = TRUE, labels = 5, lines = 0, main = "K-means cluster plot")
### NEOVISNA SEGMENTACIJA <<<
### NEOVISNA SEGMENTACIJA >>>
# provjera u odnosu na simulaciju, ako postoji
if (!is.null(simcoefs) & !is.null(simcoefs$beta) & !is.null(simcoefs$seg.df)) {
true_coefs = simcoefs$beta
true_segments = simcoefs$seg.df
true_coefs_avg = apply(true_coefs, 2, mean)
# koliko dobro je pogodio average koeficijente?
true_vs_estimated_coefs_avg = matrix(
data = c(true_coefs_avg, estimated_coefs_avg),
nrow = 2,
ncol = length(estimated_coefs_avg),
byrow = TRUE,
dimnames = list(vals = c("true", "est"), coefs = names(estimated_coefs_avg))
)
true_vs_estimated_coefs_avg
# nađemo permutaciju koja maksimizira točnu segmentaciju ispitanika
getPerms = function(x) {
if (length(x) == 1) {
return(x)
} else {
res = matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res = rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
}
all_seg_perms = getPerms(1:designctx$rsegments)
seg_perm_score = rep(0, nrow(all_seg_perms))
resp_segs_permuted = matrix(0, nrow = nrow(all_seg_perms), ncol = length(resp_segs))
for (i in 1:nrow(all_seg_perms)) {
for (c in 1:designctx$rsegments) {
resp_segs_permuted[i, resp_segs == c] = all_seg_perms[i, c]
}
seg_perm_score[i] = sum(true_segments$seg == resp_segs_permuted[i, ])
}
seg_perm = all_seg_perms[which.max(seg_perm_score), ] # ako treba "preimenovati" segmente, onda to napravimo ovdje s permutacijom
# estimated_coefs_by_seg je gore definirano, ovisno o metodi
colnames(estimated_coefs_by_seg) = colnames(true_coefs)
estimated_coefs_by_seg = estimated_coefs_by_seg[seg_perm, ] # preslagivanje redova - segmenata prema permutaciji
rownames(estimated_coefs_by_seg) = rownames(true_coefs)
# koliko dobro je pogodio koeficijente po segmentima?
true_vs_estimated_coefs_seg = matrix(
data = unlist(lapply(1:nrow(estimated_coefs_by_seg), function(i) c(true_coefs[i, ], estimated_coefs_by_seg[i, ]))),
nrow = 2 * nrow(estimated_coefs_by_seg),
ncol = ncol(estimated_coefs_by_seg),
byrow = TRUE,
dimnames = list(
vals = unlist(lapply(1:nrow(estimated_coefs_by_seg), function(i) paste("seg_", i, "_", c("true", "est"), sep = ""))),
coefs = colnames(estimated_coefs_by_seg))
)
true_vs_estimated_coefs_seg
# koliko dobro je pogodio pripadnost ispitanika segmentu?
resp_segs = resp_segs_permuted[which.max(seg_perm_score), ]
table(true_segments$seg == resp_segs)
paste("Correct segmentation: ", round(sum(true_segments$seg == resp_segs)/length(true_segments$seg), 2)*100, "%", sep = "")
}
!is.null(simcoefs)
!is.null(simcoefs$beta)
simcoefs
str(simcoefs)
is.list(simcoefs)
### NEOVISNA SEGMENTACIJA >>>
# provjera u odnosu na simulaciju, ako postoji
if (!is.null(simcoefs) & is.list(simcoefs) & !is.null(simcoefs$beta) & !is.null(simcoefs$seg.df)) {
true_coefs = simcoefs$beta
true_segments = simcoefs$seg.df
true_coefs_avg = apply(true_coefs, 2, mean)
# koliko dobro je pogodio average koeficijente?
true_vs_estimated_coefs_avg = matrix(
data = c(true_coefs_avg, estimated_coefs_avg),
nrow = 2,
ncol = length(estimated_coefs_avg),
byrow = TRUE,
dimnames = list(vals = c("true", "est"), coefs = names(estimated_coefs_avg))
)
true_vs_estimated_coefs_avg
# nađemo permutaciju koja maksimizira točnu segmentaciju ispitanika
getPerms = function(x) {
if (length(x) == 1) {
return(x)
} else {
res = matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res = rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
}
all_seg_perms = getPerms(1:designctx$rsegments)
seg_perm_score = rep(0, nrow(all_seg_perms))
resp_segs_permuted = matrix(0, nrow = nrow(all_seg_perms), ncol = length(resp_segs))
for (i in 1:nrow(all_seg_perms)) {
for (c in 1:designctx$rsegments) {
resp_segs_permuted[i, resp_segs == c] = all_seg_perms[i, c]
}
seg_perm_score[i] = sum(true_segments$seg == resp_segs_permuted[i, ])
}
seg_perm = all_seg_perms[which.max(seg_perm_score), ] # ako treba "preimenovati" segmente, onda to napravimo ovdje s permutacijom
# estimated_coefs_by_seg je gore definirano, ovisno o metodi
colnames(estimated_coefs_by_seg) = colnames(true_coefs)
estimated_coefs_by_seg = estimated_coefs_by_seg[seg_perm, ] # preslagivanje redova - segmenata prema permutaciji
rownames(estimated_coefs_by_seg) = rownames(true_coefs)
# koliko dobro je pogodio koeficijente po segmentima?
true_vs_estimated_coefs_seg = matrix(
data = unlist(lapply(1:nrow(estimated_coefs_by_seg), function(i) c(true_coefs[i, ], estimated_coefs_by_seg[i, ]))),
nrow = 2 * nrow(estimated_coefs_by_seg),
ncol = ncol(estimated_coefs_by_seg),
byrow = TRUE,
dimnames = list(
vals = unlist(lapply(1:nrow(estimated_coefs_by_seg), function(i) paste("seg_", i, "_", c("true", "est"), sep = ""))),
coefs = colnames(estimated_coefs_by_seg))
)
true_vs_estimated_coefs_seg
# koliko dobro je pogodio pripadnost ispitanika segmentu?
resp_segs = resp_segs_permuted[which.max(seg_perm_score), ]
table(true_segments$seg == resp_segs)
paste("Correct segmentation: ", round(sum(true_segments$seg == resp_segs)/length(true_segments$seg), 2)*100, "%", sep = "")
}
### NEOVISNA SEGMENTACIJA >>>
# provjera u odnosu na simulaciju, ako postoji
if (!is.null(simcoefs) && is.list(simcoefs) && !is.null(simcoefs$beta) && !is.null(simcoefs$seg.df)) {
true_coefs = simcoefs$beta
true_segments = simcoefs$seg.df
true_coefs_avg = apply(true_coefs, 2, mean)
# koliko dobro je pogodio average koeficijente?
true_vs_estimated_coefs_avg = matrix(
data = c(true_coefs_avg, estimated_coefs_avg),
nrow = 2,
ncol = length(estimated_coefs_avg),
byrow = TRUE,
dimnames = list(vals = c("true", "est"), coefs = names(estimated_coefs_avg))
)
true_vs_estimated_coefs_avg
# nađemo permutaciju koja maksimizira točnu segmentaciju ispitanika
getPerms = function(x) {
if (length(x) == 1) {
return(x)
} else {
res = matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res = rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
}
all_seg_perms = getPerms(1:designctx$rsegments)
seg_perm_score = rep(0, nrow(all_seg_perms))
resp_segs_permuted = matrix(0, nrow = nrow(all_seg_perms), ncol = length(resp_segs))
for (i in 1:nrow(all_seg_perms)) {
for (c in 1:designctx$rsegments) {
resp_segs_permuted[i, resp_segs == c] = all_seg_perms[i, c]
}
seg_perm_score[i] = sum(true_segments$seg == resp_segs_permuted[i, ])
}
seg_perm = all_seg_perms[which.max(seg_perm_score), ] # ako treba "preimenovati" segmente, onda to napravimo ovdje s permutacijom
# estimated_coefs_by_seg je gore definirano, ovisno o metodi
colnames(estimated_coefs_by_seg) = colnames(true_coefs)
estimated_coefs_by_seg = estimated_coefs_by_seg[seg_perm, ] # preslagivanje redova - segmenata prema permutaciji
rownames(estimated_coefs_by_seg) = rownames(true_coefs)
# koliko dobro je pogodio koeficijente po segmentima?
true_vs_estimated_coefs_seg = matrix(
data = unlist(lapply(1:nrow(estimated_coefs_by_seg), function(i) c(true_coefs[i, ], estimated_coefs_by_seg[i, ]))),
nrow = 2 * nrow(estimated_coefs_by_seg),
ncol = ncol(estimated_coefs_by_seg),
byrow = TRUE,
dimnames = list(
vals = unlist(lapply(1:nrow(estimated_coefs_by_seg), function(i) paste("seg_", i, "_", c("true", "est"), sep = ""))),
coefs = colnames(estimated_coefs_by_seg))
)
true_vs_estimated_coefs_seg
# koliko dobro je pogodio pripadnost ispitanika segmentu?
resp_segs = resp_segs_permuted[which.max(seg_perm_score), ]
table(true_segments$seg == resp_segs)
paste("Correct segmentation: ", round(sum(true_segments$seg == resp_segs)/length(true_segments$seg), 2)*100, "%", sep = "")
}
### NEOVISNA SEGMENTACIJA <<<
comb_size = 3 # size of the TURF combination that we will test
respids = unique(cbc.df$resp.id) # koristi se i kasnije, zato je ovdje globalno deklarirano
##
## Calculate TURF
# uses global respids, designctx$items
# comb_size_l, how many "new" items to add
# start_comb, elements that must be included in the combinations
# returns a data frame with all the combinations made from start_comb and the rest of the items
get_rf_df = function(comb_size_l, start_comb = c(), verbose = TRUE) {
if (verbose) {
print(paste("comb_size =", comb_size_l))
print(paste("start =", paste(start_comb, collapse = ", ")))
}
items_l = dplyr::setdiff(designctx$items, start_comb)
items_combs_l = combn(items_l, comb_size_l)
items_combs = array("", dim = c(length(start_comb) + comb_size_l, ncol(items_combs_l)))
for (itc in 1:ncol(items_combs_l)) {
items_combs[, itc] = c(start_comb, items_combs_l[, itc])
}
combs_df = data.frame(respid = rep(respids, ncol(items_combs)))
combinations = sapply(1:ncol(items_combs), function(itc) paste(items_combs[, itc], collapse = ", "))
combs_df$combination = rep(combinations, each = length(respids))
for (ci in make.names(designctx$items)) combs_df[[ci]] = 0
combs_df$reach = combs_df$freq = 0
for (i in 1:ncol(items_combs)) {
comb_cols = colnames(combs_df) %in% make.names(items_combs[, i])
#    combs_df[(1:length(respids))+(i-1)*length(respids), comb_cols] = 1
for (r in 1:length(respids)) {
ir_utils = calc.utilities.hb.zc(model = hb.post, data = data.frame(opcije = items_combs[, i]), resp_i = respids[r])
probs_reach = exp(ir_utils)/(sum(exp(ir_utils))+1) # ovo je ok ako imamo anchor, provjeriti još da li je ok ako ga nemamo
reached = sapply(probs_reach, function(prob_reach) {
sample(c(TRUE, FALSE), 1, replace = FALSE, prob = c(prob_reach, 1-prob_reach))
})
resp_comb_row = r+(i-1)*length(respids)
combs_df[resp_comb_row, comb_cols] = ifelse(reached, as.numeric(1), as.numeric(-1))
combs_df[resp_comb_row, "reach"] = as.numeric(any(reached))
combs_df[resp_comb_row, "freq"] = as.numeric(sum(reached))
}
if ((verbose) & ((i %% 10) == 0)) print(paste(round(i/ncol(items_combs), 2)*100, "%", sep = ""))
}
if (verbose) print(paste(round(i/ncol(items_combs), 2)*100, "%", sep = ""))
combs_df
}
library(dplyr)
start_comb = c()
comb_size_partition = c(comb_size) # 1 step
#comb_size_partition = c(2, 3) # 2 steps: first get 2, then 3 optimal items
for (cspi in comb_size_partition) {
combs_df = get_rf_df(cspi, start_comb)
combs_out = combs_df %>% dplyr::group_by(combination) %>% dplyr::summarise(reach = sum(reach), freq = sum(freq))
combs_out = combs_out[order(combs_out$reach, decreasing = TRUE), ]
start_comb = unlist(strsplit(combs_out[1, ]$combination, ", "))
}
saveRDS(combs_df, turffile)
##
combs_df = readRDS(turffile)
combs_out = combs_df %>% dplyr::group_by(combination) %>% dplyr::summarise(reach = sum(reach), freq = sum(freq))
combs_out = combs_out[order(combs_out$reach, decreasing = TRUE), ]
head(combs_out)
# https://en.wikipedia.org/wiki/McNemar%27s_test
comb1_i = 1
comb2_i = 2
comb_diff = FALSE
while ((comb_diff == FALSE) & (comb2_i <= nrow(combs_out))) {
comb1 = combs_out[comb1_i, ]$combination
comb2 = combs_out[comb2_i, ]$combination
comb1_positive = combs_df[(combs_df$combination == comb1) & (combs_df$reach == 1), ]$respid
comb1_negative = combs_df[(combs_df$combination == comb1) & (combs_df$reach == 0), ]$respid
comb2_positive = combs_df[(combs_df$combination == comb2) & (combs_df$reach == 1), ]$respid
comb2_negative = combs_df[(combs_df$combination == comb2) & (combs_df$reach == 0), ]$respid
mcnemar_a = length(dplyr::intersect(comb1_positive, comb2_positive)) # both positive
mcnemar_b = length(dplyr::intersect(comb1_positive, comb2_negative)) # 1 positive, 2 negative
mcnemar_c = length(dplyr::intersect(comb1_negative, comb2_positive)) # 1 negative, 2 positive
mcnemar_d = length(dplyr::intersect(comb1_negative, comb2_negative)) # both negative
mcnemar_x = matrix(c(mcnemar_a, mcnemar_b, mcnemar_c, mcnemar_d),
nrow = 2,
byrow = TRUE,
dimnames = list("1st Comb" = c("Reached", "Not Reached"), "2nd Comb" = c("Reached", "Not Reached")))
mcnemar_out = mcnemar.test(mcnemar_x)
# 0 hipoteza je da nema stvarne razlike između kombinacija, alternativna je da razlika postoji
# znači ako je p-value veća od npr. 0.05, zadržavamo 0 hipotezu, ako je manja, odbacujemo 0 hipotezu u korist alternativne
comb_diff = (mcnemar_out$p.value < 0.05)
comb2_i = comb2_i + 1
}
if (comb2_i > nrow(combs_out)) {
print("All combinations are statistically equal.")
} else {
print(paste("First ", comb2_i-1, " combinations are statistically equal.", sep = ""))
combs_out[1:(comb2_i-1), ]
}
