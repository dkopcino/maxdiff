# mm = domodelmatrix(cbc.df$alt, nalts, getdfcolumns(cbc.df, cnames = names(designctx$covariates)))
# items.columns = attr(mm, "items.columns")
# cov.columns = attr(mm, "cov.columns")
#
# # remove the Intercept column - it is essentially contained in the alt column (Intercept is when all predictors are 0 - that leaves only the alt as the predictor)
# mm = mm[, -1]
# items.columns = items.columns[-1]
#
# cbc.mm = data.frame(cbind(resp.id = bw_encode_data_1(cbc.df$resp.id, nalts),
#                           ques = rep(rep(1:(2*designctx$nquestions), each = nalts), max(cbc.df$resp.id)),
# #                          alt = cbc.df$alt,
#                           alt = rep(1:nalts, nrow(mm)/nalts),
#                           mm,
#                           choice = bw_encode_data(cbc.df$best_choice, cbc.df$worst_choice, nalts)))
#
# helper za neke situacije, npr. za stan.mc
cbc.mm.clear = cbc.mm[, items.columns]
unique(cbc.df$resp.id)-1:max(cbc.df$resp.id)
#############################################################################################################
### >>> HIERARCHICAL BAYES
library(ChoiceModelR)
# # modeliranje
cmr_choice = rep(0, nrow(cbc.mm))
cmr_choice[cbc.mm$alt == 1] = cbc.mm[cbc.mm$choice == 1, "alt"]
cmr.mm = cbind(cbc.mm[, colnames(cbc.mm) != "choice"], cmr_choice)
cmr.mm.bez.cov = cmr.mm[, !(colnames(cmr.mm) %in% cov.columns)]
demos = NULL
if (length(designctx$covariates) > 0) {
# zbog ponavljanja demografije u redovima, trebamo izvaditi samo 1., 2., ... max(resp.id)
max_resp_id = max(cmr.mm$resp.id)
total_rows = nrow(cmr.mm)
demos = as.matrix(cmr.mm[(0:(max_resp_id-1))*(total_rows/max_resp_id)+1, cov.columns])
}
## Build and save the model
if (!is.null(demos)) {
hb.post = choicemodelr(data = cmr.mm.bez.cov,
xcoding = rep(1, ncol(cmr.mm.bez.cov) - 4),
demos = demos,
mcmc = list(R = 20000, use = 10000),
options = list(save = TRUE))
} else {
hb.post = choicemodelr(data = cmr.mm.bez.cov,
xcoding = rep(1, ncol(cmr.mm.bez.cov) - 4),
mcmc = list(R = 20000, use = 10000),
options = list(save = TRUE))
}
saveRDS(hb.post, hbmodelfile)
##
hb.post = readRDS(hbmodelfile)
# names(hb.post)
# betadraw su sva izvlačenja: ni (useri) x natt (atributi) x ndraws (izvlačenja)
# compdraw su sva izvlačenja srednjih vrijednosti atributa i (ko)varijanci: ndraw x (mu: natt, rooti: natt x natt) [bez utjecaja covariates, tj. kad su covariates = 0]
# deltadraw su sva izvlačenja adjustmentsa za covariates: ndraw x (ncovariates x natt)
# adjustments idu ovim redom: 1.cov/1.att, 2.cov/1.att, ..., n.cov/1.att, 1.cov/2.att, 2.cov/2.att...
# itd. sve do 1.cov/n.att, 2.cov/n.att, ... , n.cov/n.att
# u apply MARGIN označava indekse koje fiksiramo, a onda sve ostale indekse zbrojimo/izračunamo prosjek
# npr. ako je a 3x4x5 apply(a, 2:3, mean) će za svaki par iz svih parova 2.-og i 3.-eg indeksa sumirati sve elemente
# za 1. indeks i izračunati sredinu; ukupno će rezultat biti 4x5
# za fiksiranog usera i atribut, izračunaj prosječnu vrijednost izvlačenja, odn. koeficijenta
# delta.means = apply(delta.d, c(1, 3), sum) # draws of total effect from all covariates on attributes
beta.post.mean = apply(hb.post$betadraw, 1:2, mean) # izračun svih prosječnih koeficijenata za svakog ispitanika
sm_means = apply(t(beta.post.mean), 1, mean)
beta.post.q25 = apply(hb.post$betadraw, 1:2, quantile, probs = c(0.25)) # isto kao gore, samo 25% kvantil
beta.post.q75 = apply(hb.post$betadraw, 1:2, quantile, probs = c(0.75)) # isto kao gore, samo 75% kvantil
sm_q25 = apply(t(beta.post.q25), 1, mean)
sm_q75 = apply(t(beta.post.q75), 1, mean)
sm.hb = cbind("1st Qu." = sm_q25, "Mean" = sm_means, "3rd Qu." = sm_q75)
rownames(sm.hb) = setdiff(colnames(cmr.mm.bez.cov), c("resp.id", "ques", "alt", "cmr_choice"))
sm.hb
### HIERARCHICAL BAYES <<<
#############################################################################################################
library(ggplot2)
# zero-center the coefficents
zc.sm = (sm[, "Mean"] - mean(sm[, "Mean"]))
prob.zc.sm = exp(zc.sm)/(exp(zc.sm)+designctx$nalternatives-1)
perc.zc.sm = (prob.zc.sm*100)/(1/designctx$nalternatives)
#perc.zc.sm = ((prob.zc.sm/sum(prob.zc.sm))*100)
ggplot(data = data.frame(product = paste(names(perc.zc.sm), " (", round(perc.zc.sm, digits = 2), ")", sep = ""), value = perc.zc.sm), aes(x = product, y = value)) + geom_col(fill = "blue") + geom_hline(aes(yintercept = 100), linetype = "dashed", color = "red") +  labs(y = "ne zanima me.......zanima me", color = "red") + theme(axis.title.x = element_text(hjust = .23), axis.title.y = element_blank()) + coord_flip()
mostvpi = which.max(perc.zc.sm)
mostvpv = perc.zc.sm[mostvpi]
mostvpn = names(mostvpv)
compvpv = perc.zc.sm[mostvpi+1]
compvpn = names(compvpv)
rationmostcomp = round(as.numeric(mostvpv/compvpv), digits = 2)
moreless = if (rationmostcomp > 1) "veća" else "manja"
holdout_respondents_n = 30
holdout_respondents_q = 3
holdout_respondents = sample(1:max(cbc.df$resp.id), holdout_respondents_n, replace = FALSE)
holdout_questions = sample(1:max(cbc.df$ques), holdout_respondents_q, replace = FALSE)
keep_cols = c("alt")
rgrid = expand.grid(holdout_questions, holdout_respondents)
holdout_true_predicted = matrix(
NA,
nrow = holdout_respondents_n * holdout_respondents_q,
ncol = 6,
dimnames = list(
"respondent/question" = paste(rgrid$Var2, "/", rgrid$Var1, sep = ""),
"choice" = c("true best", "predicted best", "correct best", "true worst", "predicted worst", "correct worst")
)
)
holdout_true_predicted_mnl = holdout_true_predicted_hb = holdout_true_predicted_stan_mc = holdout_true_predicted_stan_mc_lca = holdout_true_predicted
for (i in 1:holdout_respondents_n) { # respondent
for (j in 1:holdout_respondents_q) { # question
#print(paste("i = ", i, ", j = ", j))
ffd_df = cbc.df[(cbc.df$resp.id == holdout_respondents[i]) & (cbc.df$ques == holdout_questions[j]), ]
#if (nrow(ffd_df) == 0) next
true_best_choice = which(ffd_df$best_choice == 1)
true_worst_choice = which(ffd_df$worst_choice == 1)
ffd_df = ffd_df[, keep_cols, drop = FALSE]
# predicted = predict.hier.mnl.choice(m2.hier, ffd_df, holdout_respondents[i])
# predicted_best_choice = which(predicted$best_choice == 1)
# predicted_worst_choice = which(predicted$worst_choice == 1)
# holdout_true_predicted_mnl[(i-1)*holdout_respondents_q+j, ] =
#   c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
#     true_worst_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
#
predicted = predict.hb.mnl.choice(hb.post, ffd_df, holdout_respondents[i])
predicted_best_choice = which(predicted$best_choice == 1)
predicted_worst_choice = which(predicted$worst_choice == 1)
holdout_true_predicted_hb[(i-1)*holdout_respondents_q+j, ] =
c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
true_worst_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
# predicted = predict.stan.mc.choice(stan.mc, ffd_df, holdout_respondents[i])
# predicted_best_choice = which(predicted$best_choice == 1)
# predicted_worst_choice = which(predicted$worst_choice == 1)
# holdout_true_predicted_stan_mc[(i-1)*holdout_respondents_q+j, ] =
#   c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
#     true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
#
# predicted = predict.stan.mc.choice(stan.mc.lca, ffd_df, holdout_respondents[i])
# predicted_best_choice = which(predicted$best_choice == 1)
# predicted_worst_choice = which(predicted$worst_choice == 1)
# holdout_true_predicted_stan_mc_lca[(i-1)*holdout_respondents_q+j, ] =
#   c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
#     true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
}
}
unique(cbc.df$resp.id)-unique(cbc.mm$resp.id)
unique(cbc.df$ques)-unique(cbc.mm$ques)
# ako su neka pitanja obrisana zbog čišćenja NA, onda treba renumerirati pitanja da idu od 1 do max, za svakog ispitanika
for (rid in cbc.mm$resp.id) {
ques1 = cbc.mm[cbc.mm$resp.id == rid, ]$ques
ques1_ = cbc.df[cbc.df$resp.id == rid, ]$ques
ques1u = unique(ques1)
ques2u = 1:length(unique(ques1u))
for (i in ques2u) {
ques1[ques1 == ques1u[i]] = ques2u[i]
ques1_[ques1_ == ques1u[i]] = ques2u[i]
}
cbc.mm[cbc.mm$resp.id == rid, ]$ques = ques1
cbc.df[cbc.df$resp.id == rid, ]$ques = ques1_
}
unique(cbc.df$ques)-unique(cbc.mm$ques)
unique(cbc.df$ques)
unique(cbc.mm$ques)
source("surveyconfig.R")
designctx = readRDS(designctxfile)
cbc.df_0 = read.csv(gsub("_answers", "_answers_0", answersfile), header = TRUE, sep = ",", quote = "\"", stringsAsFactors = FALSE)
cbc.df = read.csv(answersfile, header = TRUE, sep = ",", quote = "\"", stringsAsFactors = FALSE)
cbc.df_0$resp.id = cbc.df_0$resp.id + max(cbc.df$resp.id)
cbc.df = rbind(cbc.df, cbc.df_0)
simcoefs = NULL
if (file.exists(simulatecoefsfile)) simcoefs = readRDS(simulatecoefsfile)
for (cn in colnames(designctx$survey)) {
if (!is.null(cbc.df[[cn]])) {
cbc.df[[cn]] = factor(cbc.df[[cn]], levels = levels(designctx$survey[[cn]]))
}
}
for (cn in colnames(designctx$fullfact_covdesign)) {
if (!is.null(cbc.df[[cn]])) {
cbc.df[[cn]] = factor(cbc.df[[cn]], levels = levels(designctx$fullfact_covdesign[[cn]]))
# ovo dodajemo da izbjegnemo kombinaciju (0, 0) koja radi problem recimo za LCA: softmax(0, 0)
# uvijek daje jednake vjerojatnosti za sve segmente pa ne možemo dobiti ništa osim toga
contrasts(cbc.df[[cn]]) = contr.sum
}
}
for (pn in names(designctx$personals)) {
if (!is.null(cbc.df[[pn]])) {
if (designctx$personals[[pn]][["tip"]] == "dropdown") {
cbc.df[[pn]] = factor(cbc.df[[pn]], levels = designctx$personals[[pn]][["vrijednosti"]])
}
}
}
#if (!is.null(cbc.df$questionnaire.id)) cbc.df$questionnaire.id = NULL # maknemo questionnaire.id jer nam ne treba
print(designctx$items)
cbc.df = cbc.df[!is.na(cbc.df$best_choice) & !is.na(cbc.df$worst_choice), ]
cbc.df$resp.id = as.numeric(factor(cbc.df$resp.id)) # renumeracija resp.id ako je bilo micanja nedostajućih podataka
# petlja za svaki resp.id
# enkodirati pitanja, covariates, best+worst choice
# ako ima, enkodirati anchor pitanja kao choice, dodati na kraj data.framea za resp.id
cbc.mm = data.frame(NULL)
for (resp.id in 1:max(cbc.df$resp.id)) {
# izvuci subframe
cbc.df.sf = cbc.df[cbc.df$resp.id == resp.id, ]
if (nrow(cbc.df.sf) == 0) next
nalts = designctx$nalternatives
if (length(designctx$covariates) > 0) {
covs = cbc.df.sf[, names(designctx$covariates), drop = FALSE]
sf.mm = domodelmatrix_itemscovs_bwencode(cbc.df.sf$alt, covs, nalts)
items.columns = attr(sf.mm, "items.columns")
cov.columns = attr(sf.mm, "cov.columns")
} else {
covs = data.frame() # da li je ovo uopće potrebno?
sf.mm = domodelmatrix_itemsonly_bwencode(cbc.df.sf$alt, nalts)
items.columns = attr(sf.mm, "items.columns")
cov.columns = c()
}
cbc.mm.sf = data.frame(cbind(resp.id = bw_encode_data_1(cbc.df.sf$resp.id, nalts),
ques = rep(1:(2*max(cbc.df.sf$ques)), each = nalts),
#alt = cbc.df$alt,
alt = rep(1:nalts, nrow(sf.mm)/nalts),
sf.mm,
choice = bw_encode_data(cbc.df.sf$best_choice, cbc.df.sf$worst_choice, nalts)))
if (designctx$anchors > 0) {
anchorcolnames = getanchorcolnames(designctx$anchors)
anchorcols = cbc.df.sf[, colnames(cbc.df.sf) %in% anchorcolnames]
best_choices = cbc.df.sf[cbc.df.sf$best_choice == 1, ]$alt
worst_choices = cbc.df.sf[cbc.df.sf$worst_choice == 1, ]$alt
anchors = getanchors(designctx$anchors, best_choices, worst_choices)
if (length(designctx$covariates) > 0) {
anch.mm = domodelmatrix_itemscovs(anchors, covs[rep(1, length(anchors)), , drop = FALSE])
} else {
anch.mm = domodelmatrix_itemsonly(anchors)
}
anch.mm = anch.mm[rep(1:nrow(anch.mm), each = 2), ]
anch.mm[2*(1:(nrow(anch.mm)/2)), items.columns] = 0
anch.choices = rep(t(anchorcols[1, ]), each = 2)
anch.choices[2*(1:(length(anch.choices)/2))-1][anchorcols[1, ] == 2] = 0 # neparni
anch.choices[2*(1:(length(anch.choices)/2))][anchorcols[1, ] == 1] = 0 # parni
anch.choices[2*(1:(length(anch.choices)/2))][anchorcols[1, ] == 2] = 1 # parni
anch.mm.sf = data.frame(cbind(resp.id = rep(resp.id, nrow(anch.mm)),
ques = rep(max(cbc.mm.sf$ques+1):(max(cbc.mm.sf$ques)+length(anchors)), each = 2),
alt = rep(1:2, nrow(anch.mm)/2),
anch.mm,
choice = anch.choices))
cbc.mm.sf = rbind(cbc.mm.sf, anch.mm.sf)
}
cbc.mm = rbind(cbc.mm, cbc.mm.sf)
}
rownames(cbc.mm) = c()
cbc.mm = na.omit(cbc.mm)
head(cbc.df$ques)
head(cbc.df$ques, n = 50)
head(cbc.mm$ques, n = 50)
# ako su neka pitanja obrisana zbog čišćenja NA, onda treba renumerirati pitanja da idu od 1 do max, za svakog ispitanika
for (rid in cbc.mm$resp.id) {
ques1 = cbc.mm[cbc.mm$resp.id == rid, ]$ques
ques1u = unique(ques1)
ques2u = 1:length(unique(ques1u))
for (i in ques2u) {
ques1[ques1 == ques1u[i]] = ques2u[i]
}
cbc.mm[cbc.mm$resp.id == rid, ]$ques = ques1
}
if (designctx$anchors == 0) {
# remove the Intercept column - it is essentially contained in the alt column (Intercept is when all predictors are 0 - that leaves only the alt as the predictor)
# when we use anchors, then the threshold option is the 0 option, and we don't need to remove the Intercept created with modelling
cbc.mm = cbc.mm[, -4] # 1st item column is the 4th column (after resp.id, ques and alt)
items.columns = items.columns[-1]
}
# items.columns = items.columns[-1]
#
# cbc.mm = data.frame(cbind(resp.id = bw_encode_data_1(cbc.df$resp.id, nalts),
#                           ques = rep(rep(1:(2*designctx$nquestions), each = nalts), max(cbc.df$resp.id)),
# #                          alt = cbc.df$alt,
#                           alt = rep(1:nalts, nrow(mm)/nalts),
#                           mm,
#                           choice = bw_encode_data(cbc.df$best_choice, cbc.df$worst_choice, nalts)))
#
# helper za neke situacije, npr. za stan.mc
cbc.mm.clear = cbc.mm[, items.columns]
holdout_respondents_n = 30
holdout_respondents_q = 3
holdout_respondents = sample(1:max(cbc.df$resp.id), holdout_respondents_n, replace = FALSE)
holdout_questions = sample(1:max(cbc.df$ques), holdout_respondents_q, replace = FALSE)
keep_cols = c("alt")
rgrid = expand.grid(holdout_questions, holdout_respondents)
holdout_true_predicted = matrix(
NA,
nrow = holdout_respondents_n * holdout_respondents_q,
ncol = 6,
dimnames = list(
"respondent/question" = paste(rgrid$Var2, "/", rgrid$Var1, sep = ""),
"choice" = c("true best", "predicted best", "correct best", "true worst", "predicted worst", "correct worst")
)
)
holdout_true_predicted_mnl = holdout_true_predicted_hb = holdout_true_predicted_stan_mc = holdout_true_predicted_stan_mc_lca = holdout_true_predicted
for (i in 1:holdout_respondents_n) { # respondent
for (j in 1:holdout_respondents_q) { # question
#print(paste("i = ", i, ", j = ", j))
ffd_df = cbc.df[(cbc.df$resp.id == holdout_respondents[i]) & (cbc.df$ques == holdout_questions[j]), ]
if (nrow(ffd_df) == 0) next
true_best_choice = which(ffd_df$best_choice == 1)
true_worst_choice = which(ffd_df$worst_choice == 1)
ffd_df = ffd_df[, keep_cols, drop = FALSE]
# predicted = predict.hier.mnl.choice(m2.hier, ffd_df, holdout_respondents[i])
# predicted_best_choice = which(predicted$best_choice == 1)
# predicted_worst_choice = which(predicted$worst_choice == 1)
# holdout_true_predicted_mnl[(i-1)*holdout_respondents_q+j, ] =
#   c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
#     true_worst_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
#
predicted = predict.hb.mnl.choice(hb.post, ffd_df, holdout_respondents[i])
predicted_best_choice = which(predicted$best_choice == 1)
predicted_worst_choice = which(predicted$worst_choice == 1)
holdout_true_predicted_hb[(i-1)*holdout_respondents_q+j, ] =
c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
true_worst_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
# predicted = predict.stan.mc.choice(stan.mc, ffd_df, holdout_respondents[i])
# predicted_best_choice = which(predicted$best_choice == 1)
# predicted_worst_choice = which(predicted$worst_choice == 1)
# holdout_true_predicted_stan_mc[(i-1)*holdout_respondents_q+j, ] =
#   c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
#     true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
#
# predicted = predict.stan.mc.choice(stan.mc.lca, ffd_df, holdout_respondents[i])
# predicted_best_choice = which(predicted$best_choice == 1)
# predicted_worst_choice = which(predicted$worst_choice == 1)
# holdout_true_predicted_stan_mc_lca[(i-1)*holdout_respondents_q+j, ] =
#   c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
#     true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
}
}
# sum(holdout_true_predicted_mnl[, "correct best"])/nrow(holdout_true_predicted_mnl)
# sum(holdout_true_predicted_mnl[, "correct worst"])/nrow(holdout_true_predicted_mnl)
sum(holdout_true_predicted_hb[, "correct best"])/nrow(holdout_true_predicted_hb)
sum(holdout_true_predicted_hb[, "correct worst"])/nrow(holdout_true_predicted_hb)
# sum(holdout_true_predicted_stan_mc[, "correct best"])/nrow(holdout_true_predicted_stan_mc)
# sum(holdout_true_predicted_stan_mc[, "correct worst"])/nrow(holdout_true_predicted_stan_mc)
# sum(holdout_true_predicted_stan_mc_lca[, "correct best"])/nrow(holdout_true_predicted_stan_mc_lca)
# sum(holdout_true_predicted_stan_mc_lca[, "correct worst"])/nrow(holdout_true_predicted_stan_mc_lca)
#holdout_true_predicted = holdout_true_predicted_mnl
holdout_true_predicted = holdout_true_predicted_hb
#holdout_true_predicted = holdout_true_predicted_stan_mc
#holdout_true_predicted = holdout_true_predicted_stan_mc_lca
holdout_true_predicted[sample(1:nrow(holdout_true_predicted), 20), !(colnames(holdout_true_predicted) %in% c("correct best", "correct worst"))]
#holdout_true_predicted[sample(1:nrow(holdout_true_predicted), 20), ]
total_correct = sum(holdout_true_predicted[, "correct best"]) + sum(holdout_true_predicted[, "correct worst"])
paste("Ukupno točno predviđanja:", round(100*total_correct/(2*nrow(holdout_true_predicted)), digits = 2), "%", sep = "")
# sum(holdout_true_predicted_mnl[, "correct best"])/nrow(holdout_true_predicted_mnl)
# sum(holdout_true_predicted_mnl[, "correct worst"])/nrow(holdout_true_predicted_mnl)
holdout_true_predicted_hb = na.omit(holdout_true_predicted_hb)
sum(holdout_true_predicted_hb[, "correct best"])/nrow(holdout_true_predicted_hb)
sum(holdout_true_predicted_hb[, "correct worst"])/nrow(holdout_true_predicted_hb)
#holdout_true_predicted = holdout_true_predicted_mnl
holdout_true_predicted = holdout_true_predicted_hb
holdout_true_predicted[sample(1:nrow(holdout_true_predicted), 20), !(colnames(holdout_true_predicted) %in% c("correct best", "correct worst"))]
#holdout_true_predicted[sample(1:nrow(holdout_true_predicted), 20), ]
total_correct = sum(holdout_true_predicted[, "correct best"]) + sum(holdout_true_predicted[, "correct worst"])
paste("Ukupno točno predviđanja:", round(100*total_correct/(2*nrow(holdout_true_predicted)), digits = 2), "%", sep = "")
holdout_respondents_n = 50
holdout_respondents_q = 3
holdout_respondents = sample(1:max(cbc.df$resp.id), holdout_respondents_n, replace = FALSE)
holdout_questions = sample(1:max(cbc.df$ques), holdout_respondents_q, replace = FALSE)
keep_cols = c("alt")
rgrid = expand.grid(holdout_questions, holdout_respondents)
holdout_true_predicted = matrix(
NA,
nrow = holdout_respondents_n * holdout_respondents_q,
ncol = 6,
dimnames = list(
"respondent/question" = paste(rgrid$Var2, "/", rgrid$Var1, sep = ""),
"choice" = c("true best", "predicted best", "correct best", "true worst", "predicted worst", "correct worst")
)
)
holdout_true_predicted_mnl = holdout_true_predicted_hb = holdout_true_predicted_stan_mc = holdout_true_predicted_stan_mc_lca = holdout_true_predicted
for (i in 1:holdout_respondents_n) { # respondent
for (j in 1:holdout_respondents_q) { # question
#print(paste("i = ", i, ", j = ", j))
ffd_df = cbc.df[(cbc.df$resp.id == holdout_respondents[i]) & (cbc.df$ques == holdout_questions[j]), ]
if (nrow(ffd_df) == 0) next
true_best_choice = which(ffd_df$best_choice == 1)
true_worst_choice = which(ffd_df$worst_choice == 1)
ffd_df = ffd_df[, keep_cols, drop = FALSE]
# predicted = predict.hier.mnl.choice(m2.hier, ffd_df, holdout_respondents[i])
# predicted_best_choice = which(predicted$best_choice == 1)
# predicted_worst_choice = which(predicted$worst_choice == 1)
# holdout_true_predicted_mnl[(i-1)*holdout_respondents_q+j, ] =
#   c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
#     true_worst_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
#
predicted = predict.hb.mnl.choice(hb.post, ffd_df, holdout_respondents[i])
predicted_best_choice = which(predicted$best_choice == 1)
predicted_worst_choice = which(predicted$worst_choice == 1)
holdout_true_predicted_hb[(i-1)*holdout_respondents_q+j, ] =
c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
true_worst_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
# predicted = predict.stan.mc.choice(stan.mc, ffd_df, holdout_respondents[i])
# predicted_best_choice = which(predicted$best_choice == 1)
# predicted_worst_choice = which(predicted$worst_choice == 1)
# holdout_true_predicted_stan_mc[(i-1)*holdout_respondents_q+j, ] =
#   c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
#     true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
#
# predicted = predict.stan.mc.choice(stan.mc.lca, ffd_df, holdout_respondents[i])
# predicted_best_choice = which(predicted$best_choice == 1)
# predicted_worst_choice = which(predicted$worst_choice == 1)
# holdout_true_predicted_stan_mc_lca[(i-1)*holdout_respondents_q+j, ] =
#   c(true_best_choice, predicted_best_choice, true_best_choice == predicted_best_choice,
#     true_best_choice, predicted_worst_choice, true_worst_choice == predicted_worst_choice)
}
}
# sum(holdout_true_predicted_mnl[, "correct best"])/nrow(holdout_true_predicted_mnl)
# sum(holdout_true_predicted_mnl[, "correct worst"])/nrow(holdout_true_predicted_mnl)
holdout_true_predicted_hb = na.omit(holdout_true_predicted_hb)
sum(holdout_true_predicted_hb[, "correct best"])/nrow(holdout_true_predicted_hb)
sum(holdout_true_predicted_hb[, "correct worst"])/nrow(holdout_true_predicted_hb)
# sum(holdout_true_predicted_stan_mc[, "correct best"])/nrow(holdout_true_predicted_stan_mc)
# sum(holdout_true_predicted_stan_mc[, "correct worst"])/nrow(holdout_true_predicted_stan_mc)
# sum(holdout_true_predicted_stan_mc_lca[, "correct best"])/nrow(holdout_true_predicted_stan_mc_lca)
# sum(holdout_true_predicted_stan_mc_lca[, "correct worst"])/nrow(holdout_true_predicted_stan_mc_lca)
#holdout_true_predicted = holdout_true_predicted_mnl
holdout_true_predicted = holdout_true_predicted_hb
#holdout_true_predicted = holdout_true_predicted_stan_mc
#holdout_true_predicted = holdout_true_predicted_stan_mc_lca
holdout_true_predicted[sample(1:nrow(holdout_true_predicted), 20), !(colnames(holdout_true_predicted) %in% c("correct best", "correct worst"))]
#holdout_true_predicted[sample(1:nrow(holdout_true_predicted), 20), ]
total_correct = sum(holdout_true_predicted[, "correct best"]) + sum(holdout_true_predicted[, "correct worst"])
paste("Ukupno točno predviđanja:", round(100*total_correct/(2*nrow(holdout_true_predicted)), digits = 2), "%", sep = "")
perc.zc.sm
which(perc.zc.sm > 100)
perc.zc.sm[which(perc.zc.sm > 100), ]
perc.zc.sm[which(perc.zc.sm > 100)]
perc.zc.sm[order(which(perc.zc.sm > 100), decreasing = TRUE)]
zanimaju_me = perc.zc.sm[which(perc.zc.sm > 100)]
zanimaju_me = data.frame(zanimaju_me[order(zanimaju_me, decreasing = TRUE)])
zanimaju_me
colnames(zanimaju_me) = "score"
zanimaju_me
sm
str(sm)
rownames(sm)
rownames(sm) = substr(rownames(sm), 1, 10)
# koji ćemo koristiti?
sm = sm.hb
rownames(sm) = substr(rownames(sm), 1, 10)
sm
# koji ćemo koristiti?
sm = sm.hb
rownames(sm) = paste(substr(rownames(sm), 1, 10), "...", sep = "")
sm
# koji ćemo koristiti?
sm = sm.hb
psm = sm
rownames(psm) = paste(substr(rownames(psm), 1, 10), "...", sep = "")
psm
pshares = t(shares)
pshares
str(pshares)
pshares[, "opcije"]
pshares["opcije", ]
pshares["opcije", ] = paste(substr(pshares["opcije", ], 1, 10), "...", sep = "")
pshares["opcije", ]
pshares
# fullfact_design = combn(designctx$items, designctx$nalternatives)
# ffd_df = fullfact_design[, sample(1:ncol(fullfact_design), 10, replace = FALSE)]
# ffd_df = unlist(lapply(1:ncol(ffd_df), function(c) ffd_df[, c])) # data treba biti jednostavna lista opcija, ostalo će se kreirati
# ffd_df = data.frame(opcije = ffd_df)
# trebalo bi uspoređivati samo kombinacije s brojem opcija jednakim kao što je bilo kod kreiranja modela (nalternatives)
# ali prema ormeu svi to rade bez obzira na broj opcija pa ćemo i mi
#ffd_df = data.frame(opcije = designctx$items)
ffd_df = data.frame(opcije = designctx$items[sample(5)])
# fullfact_covdesign = designctx$fullfact_covdesign
# if (length(designctx$covariates) > 0) {
#   ffd_covdf = fullfact_covdesign[sample(1:nrow(fullfact_covdesign), 10, replace = TRUE), ]
#   ffd_df = cbind(ffd_df, ffd_covdf)
# }
#shares.mnl = predict.hier.mnl(m2.hier, data = ffd_df)
shares.hb = predict.hb.mnl(hb.post, data = ffd_df)
#shares.stan.mc = predict.stan.mc(stan.mc, data = ffd_df)
#shares.stan.mc.lca = predict.stan.mc(stan.mc.lca, data = ffd_df)
shares = shares.hb
# shares = shares.stan.mc
# shares = shares.stan.mc.lca
#shares
mostsharesindex = which.max(shares[["share %"]])
mostshare = shares[mostsharesindex, ]
pshares = t(shares)
pshares["opcije", ] = paste(substr(pshares["opcije", ], 1, 10), "...", sep = "")
pshares
pshares = t(shares)
pshares["opcije", ] = paste(substr(pshares["opcije", ], 1, 13), "...", sep = "")
pshares
library(ggplot2)
# zero-center the coefficents
zc.sm = (sm[, "Mean"] - mean(sm[, "Mean"]))
prob.zc.sm = exp(zc.sm)/(exp(zc.sm)+designctx$nalternatives-1)
perc.zc.sm = (prob.zc.sm*100)/(1/designctx$nalternatives)
#perc.zc.sm = ((prob.zc.sm/sum(prob.zc.sm))*100)
ggplot(data = data.frame(product = paste(paste(substr(names(perc.zc.sm), 1, 15), "...", sep = ""), " (", round(perc.zc.sm, digits = 2), ")", sep = ""), value = perc.zc.sm), aes(x = product, y = value)) + geom_col(fill = "blue") + geom_hline(aes(yintercept = 100), linetype = "dashed", color = "red") +  labs(y = "ne zanima me.......zanima me", color = "red") + theme(axis.title.x = element_text(hjust = .23), axis.title.y = element_blank()) + coord_flip()
mostvpi = which.max(perc.zc.sm)
mostvpv = perc.zc.sm[mostvpi]
mostvpn = names(mostvpv)
compvpv = perc.zc.sm[mostvpi+1]
compvpn = names(compvpv)
rationmostcomp = round(as.numeric(mostvpv/compvpv), digits = 2)
moreless = if (rationmostcomp > 1) "veća" else "manja"
library(ggplot2)
# zero-center the coefficents
zc.sm = (sm[, "Mean"] - mean(sm[, "Mean"]))
prob.zc.sm = exp(zc.sm)/(exp(zc.sm)+designctx$nalternatives-1)
perc.zc.sm = (prob.zc.sm*100)/(1/designctx$nalternatives)
#perc.zc.sm = ((prob.zc.sm/sum(prob.zc.sm))*100)
ggplot(data = data.frame(product = paste(paste(substr(names(perc.zc.sm), 1, 40), "...", sep = ""), " (", round(perc.zc.sm, digits = 2), ")", sep = ""), value = perc.zc.sm), aes(x = product, y = value)) + geom_col(fill = "blue") + geom_hline(aes(yintercept = 100), linetype = "dashed", color = "red") +  labs(y = "ne zanima me.......zanima me", color = "red") + theme(axis.title.x = element_text(hjust = .23), axis.title.y = element_blank()) + coord_flip()
mostvpi = which.max(perc.zc.sm)
mostvpv = perc.zc.sm[mostvpi]
mostvpn = names(mostvpv)
compvpv = perc.zc.sm[mostvpi+1]
compvpn = names(compvpv)
rationmostcomp = round(as.numeric(mostvpv/compvpv), digits = 2)
moreless = if (rationmostcomp > 1) "veća" else "manja"
perc.zc.sm
